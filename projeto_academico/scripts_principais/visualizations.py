#!/usr/bin/env python3 # -*- coding: utf-8 -*- 
    """ VISUALIZAÇÕES PARA ATIVIDADE PRÁTICA =================================== Módulo responsável pela criação de visualizações dos dados e resultados. Conforme solicitado na atividade prática. Funcionalidades: - Gráficos de dispersão - Histogramas - Gráficos de linha - Visualização dos resultados do modelo """
 
import pandas as pd 
import numpy as np 
import matplotlib.pyplot as plt 
import seaborn as sns 
from sklearn.metrics 
import r2_score 

class DataVisualizer: 
    """ Visualizador de dados para o projeto de imóveis. Cria visualizações conforme solicitado na atividade prática: - Gráficos de dispersão - Histogramas - Gráficos de linha """
 

def __init__(self): 
    """Inicializa o visualizador."""
 # Configurar estilo dos gráficos plt.style.use('default') sns.set_palette("husl") # Configurações globais plt.rcParams['figure.figsize'] = (12, 8) plt.rcParams['font.size'] = 10 

def criar_visualizacoes(self, df, model_results): 
    """ Cria todas as visualizações solicitadas na atividade. Args: df (pd.DataFrame): Dados limpos model_results (dict): Resultados do modelo """
 
        print("Criando visualizações...") # 1. Gráficos de dispersão (solicitado) self._criar_graficos_dispersao(df) # 2. Histogramas (solicitado) self._criar_histogramas(df) # 3. Gráficos de linha (solicitado) self._criar_graficos_linha(df) # 4. Visualização dos resultados do modelo self._visualizar_resultados_modelo(model_results) # 5. Dashboard completo self._criar_dashboard(df, model_results) 
        print("Todas as visualizações foram salvas na pasta 'data/'") 

def _criar_graficos_dispersao(self, df): 
    """Cria gráficos de dispersão para mostrar relações entre variáveis."""
 fig, axes = plt.subplots(2, 2, figsize=(15, 12)) fig.suptitle('Gráficos de Dispersão - Análise de Relações', fontsize=16, fontweight='bold') # 1. Preço vs Área axes[0,0].scatter(df['area'], df['preco'], alpha=0.6, color='blue') axes[0,0].set_xlabel('Área (m²)') axes[0,0].set_ylabel('Preço (R$)') axes[0,0].set_title('Preço vs Área') axes[0,0].grid(True, alpha=0.3) # 2. Preço vs Quartos axes[0,1].scatter(df['quartos'], df['preco'], alpha=0.6, color='green') axes[0,1].set_xlabel('Número de Quartos') axes[0,1].set_ylabel('Preço (R$)') axes[0,1].set_title('Preço vs Quartos') axes[0,1].grid(True, alpha=0.3) # 3. Área vs Quartos axes[1,0].scatter(df['quartos'], df['area'], alpha=0.6, color='red') axes[1,0].set_xlabel('Número de Quartos') axes[1,0].set_ylabel('Área (m²)') axes[1,0].set_title('Área vs Quartos') axes[1,0].grid(True, alpha=0.3) # 4. Preço por m² vs Localização locations = df['localizacao'].unique() colors = sns.color_palette("husl", len(locations)) 
        for i, loc in enumerate(locations): loc_data = df[df['localizacao'] == loc] axes[1,1].scatter(loc_data['preco_por_m2'], loc_data['preco'], alpha=0.6, label=loc, color=colors[i]) axes[1,1].set_xlabel('Preço por m² (R$/m²)') axes[1,1].set_ylabel('Preço (R$)') axes[1,1].set_title('Preço vs Preço por m² (por Região)') axes[1,1].legend(bbox_to_anchor=(1.05, 1), loc='upper left') axes[1,1].grid(True, alpha=0.3) plt.tight_layout() plt.savefig('data/graficos_dispersao.png', dpi=300, bbox_inches='tight') plt.close() 
        print("Gráficos de dispersão salvos: 'data/graficos_dispersao.png'") 

def _criar_histogramas(self, df): 
    """Cria histogramas para mostrar distribuições."""
 fig, axes = plt.subplots(2, 3, figsize=(18, 10)) fig.suptitle('Histogramas - Distribuição das Variáveis', fontsize=16, fontweight='bold') # 1. Distribuição de Preços axes[0,0].hist(df['preco'], bins=30, alpha=0.7, color='blue', edgecolor='black') axes[0,0].set_xlabel('Preço (R$)') axes[0,0].set_ylabel('Frequência') axes[0,0].set_title('Distribuição de Preços') axes[0,0].grid(True, alpha=0.3) # 2. Distribuição de Áreas axes[0,1].hist(df['area'], bins=25, alpha=0.7, color='green', edgecolor='black') axes[0,1].set_xlabel('Área (m²)') axes[0,1].set_ylabel('Frequência') axes[0,1].set_title('Distribuição de Áreas') axes[0,1].grid(True, alpha=0.3) # 3. Distribuição de Quartos quartos_counts = df['quartos'].value_counts().sort_index() axes[0,2].bar(quartos_counts.index, quartos_counts.values, alpha=0.7, color='red', edgecolor='black') axes[0,2].set_xlabel('Número de Quartos') axes[0,2].set_ylabel('Frequência') axes[0,2].set_title('Distribuição de Quartos') axes[0,2].grid(True, alpha=0.3) # 4. Distribuição por Localização loc_counts = df['localizacao'].value_counts() axes[1,0].bar(range(len(loc_counts)), loc_counts.values, alpha=0.7, color='orange', edgecolor='black') axes[1,0].set_xlabel('Localização') axes[1,0].set_ylabel('Frequência') axes[1,0].set_title('Distribuição por Localização') axes[1,0].set_xticks(range(len(loc_counts))) axes[1,0].set_xticklabels(loc_counts.index, rotation=45) axes[1,0].grid(True, alpha=0.3) # 5. Distribuição de Preço por m² axes[1,1].hist(df['preco_por_m2'], bins=25, alpha=0.7, color='purple', edgecolor='black') axes[1,1].set_xlabel('Preço por m² (R$/m²)') axes[1,1].set_ylabel('Frequência') axes[1,1].set_title('Distribuição de Preço por m²') axes[1,1].grid(True, alpha=0.3) # 6. Distribuição por Tipo tipo_counts = df['tipo'].value_counts() axes[1,2].pie(tipo_counts.values, labels=tipo_counts.index, autopct='%1.1f%%', startangle=90) axes[1,2].set_title('Distribuição por Tipo de Imóvel') plt.tight_layout() plt.savefig('data/histogramas.png', dpi=300, bbox_inches='tight') plt.close() 
        print("Histogramas salvos: 'data/histogramas.png'") 

def _criar_graficos_linha(self, df): 
    """Cria gráficos de linha para tendências."""
 fig, axes = plt.subplots(2, 2, figsize=(15, 10)) fig.suptitle('Gráficos de Linha - Tendências e Padrões', fontsize=16, fontweight='bold') # 1. Preço médio por região (ordenado) preco_por_regiao = df.groupby('localizacao')['preco'].mean().sort_values(ascending=False) axes[0,0].plot(range(len(preco_por_regiao)), preco_por_regiao.values, marker='o', linewidth=2, markersize=8) axes[0,0].set_xlabel('Ranking das Regiões') axes[0,0].set_ylabel('Preço Médio (R$)') axes[0,0].set_title('Preço Médio por Região (Ranking)') axes[0,0].set_xticks(range(len(preco_por_regiao))) axes[0,0].set_xticklabels(preco_por_regiao.index, rotation=45) axes[0,0].grid(True, alpha=0.3) # 2. Preço médio por número de quartos preco_por_quartos = df.groupby('quartos')['preco'].mean().sort_index() axes[0,1].plot(preco_por_quartos.index, preco_por_quartos.values, marker='s', linewidth=2, markersize=8, color='green') axes[0,1].set_xlabel('Número de Quartos') axes[0,1].set_ylabel('Preço Médio (R$)') axes[0,1].set_title('Preço Médio por Número de Quartos') axes[0,1].grid(True, alpha=0.3) # 3. Área média por região area_por_regiao = df.groupby('localizacao')['area'].mean().sort_values(ascending=False) axes[1,0].plot(range(len(area_por_regiao)), area_por_regiao.values, marker='^', linewidth=2, markersize=8, color='red') axes[1,0].set_xlabel('Regiões') axes[1,0].set_ylabel('Área Média (m²)') axes[1,0].set_title('Área Média por Região') axes[1,0].set_xticks(range(len(area_por_regiao))) axes[1,0].set_xticklabels(area_por_regiao.index, rotation=45) axes[1,0].grid(True, alpha=0.3) # 4. Preço por m² por região preco_m2_regiao = df.groupby('localizacao')['preco_por_m2'].mean().sort_values(ascending=False) axes[1,1].plot(range(len(preco_m2_regiao)), preco_m2_regiao.values, marker='d', linewidth=2, markersize=8, color='purple') axes[1,1].set_xlabel('Regiões') axes[1,1].set_ylabel('Preço por m² Médio (R$/m²)') axes[1,1].set_title('Preço por m² Médio por Região') axes[1,1].set_xticks(range(len(preco_m2_regiao))) axes[1,1].set_xticklabels(preco_m2_regiao.index, rotation=45) axes[1,1].grid(True, alpha=0.3) plt.tight_layout() plt.savefig('data/graficos_linha.png', dpi=300, bbox_inches='tight') plt.close() 
        print("Gráficos de linha salvos: 'data/graficos_linha.png'") 

def _visualizar_resultados_modelo(self, results): 
    """Visualiza os resultados do modelo de regressão linear."""
 fig, axes = plt.subplots(2, 2, figsize=(15, 12)) fig.suptitle('Resultados do Modelo de Regressão Linear', fontsize=16, fontweight='bold') # Verificar se temos dados do modelo 
        if 'y_test' not in results or 'y_pred' not in results: 
        print("Aviso: Dados de predição não disponíveis para visualização") 
        return y_test = results.get('y_test', []) y_pred = results.get('y_pred', []) 
        if len(y_test) > 0 and len(y_pred) > 0: # 1. Valores Reais vs Preditos axes[0,0].scatter(y_test, y_pred, alpha=0.6) min_val = min(min(y_test), min(y_pred)) max_val = max(max(y_test), max(y_pred)) axes[0,0].plot([min_val, max_val], [min_val, max_val], 'r--', lw=2) axes[0,0].set_xlabel('Valores Reais (R$)') axes[0,0].set_ylabel('Valores Preditos (R$)') axes[0,0].set_title(f'Reais vs Preditos (R² = {results["r2_score"]:.4f})') axes[0,0].grid(True, alpha=0.3) # 2. Resíduos residuos = y_test - y_pred axes[0,1].scatter(y_pred, residuos, alpha=0.6) axes[0,1].axhline(y=0, color='r', linestyle='--') axes[0,1].set_xlabel('Valores Preditos (R$)') axes[0,1].set_ylabel('Resíduos (R$)') axes[0,1].set_title('Análise de Resíduos') axes[0,1].grid(True, alpha=0.3) # 3. Métricas do modelo metrics = ['R² Score', 'RMSE (R$)', 'MAE (R$)'] values = [results['r2_score'], results['rmse'], results['mae']] colors = ['green' 
        if results['r2_score'] > 0.7 else 'orange', 'blue', 'purple'] bars = axes[1,0].bar(metrics, values, color=colors, alpha=0.7) axes[1,0].set_title('Métricas de Performance') axes[1,0].set_ylabel('Valor') # Adicionar valores nas barras 
        for bar, value in zip(bars, values): height = bar.get_height() 
        if 'R²' in bar.get_x(): axes[1,0].text(bar.get_x() + bar.get_width()/2., height + height*0.01, f'{value:.4f}', ha='center', va='bottom') 
        else: axes[1,0].text(bar.get_x() + bar.get_width()/2., height + height*0.01, f'{value:,.0f}', ha='center', va='bottom') # 4. Importância das features (coeficientes) 
        if 'feature_importance' in results: features = list(results['feature_importance'].keys()) importance = list(results['feature_importance'].values()) # Ordenar por importância absoluta sorted_idx = np.argsort([abs(x) 
        for x in importance])[::-1] features_sorted = [features[i] 
        for i in sorted_idx] importance_sorted = [importance[i] for i in sorted_idx] bars = axes[1,1].barh(features_sorted, importance_sorted) axes[1,1].set_xlabel('Coeficiente') axes[1,1].set_title('Importância das Features (Coeficientes)') axes[1,1].grid(True, alpha=0.3) plt.tight_layout() plt.savefig('data/resultados_modelo.png', dpi=300, bbox_inches='tight') plt.close() 
        print("Resultados do modelo salvos: 'data/resultados_modelo.png'") 

def _criar_dashboard(self, df, results): 
    """Cria dashboard completo da análise."""
 fig = plt.figure(figsize=(20, 12)) fig.suptitle('Dashboard Completo - Análise de Preços de Imóveis DF', fontsize=20, fontweight='bold') # Layout do dashboard gs = fig.add_gridspec(3, 4, hspace=0.3, wspace=0.3) # 1. Distribuição de preços ax1 = fig.add_subplot(gs[0, 0]) ax1.hist(df['preco'], bins=20, alpha=0.7, color='blue', edgecolor='black') ax1.set_title('Distribuição de Preços') ax1.set_xlabel('Preço (R$)') ax1.set_ylabel('Frequência') # 2. Preço vs Área ax2 = fig.add_subplot(gs[0, 1]) ax2.scatter(df['area'], df['preco'], alpha=0.6, color='green') ax2.set_title('Preço vs Área') ax2.set_xlabel('Área (m²)') ax2.set_ylabel('Preço (R$)') # 3. Preço por região ax3 = fig.add_subplot(gs[0, 2:]) preco_regiao = df.groupby('localizacao')['preco'].mean().sort_values(ascending=True) ax3.barh(range(len(preco_regiao)), preco_regiao.values, color='orange') ax3.set_title('Preço Médio por Região') ax3.set_xlabel('Preço Médio (R$)') ax3.set_yticks(range(len(preco_regiao))) ax3.set_yticklabels(preco_regiao.index) # 4. Estatísticas principais ax4 = fig.add_subplot(gs[1, 0]) stats_text = f
    """ESTATÍSTICAS GERAIS Total de imóveis: {len(df):,} Preço médio: R$ {df['preco'].mean():,.0f} Área média: {df['area'].mean():.0f} m² Quartos mais comum: {df['quartos'].mode().iloc[0]:.0f} MODELO R² Score: {results['r2_score']:.4f} RMSE: R$ {results['rmse']:,.0f} MAE: R$ {results['mae']:,.0f}"""
 ax4.text(0.05, 0.95, stats_text, transform=ax4.transAxes, fontsize=12, verticalalignment='top', bbox=dict(boxstyle='round', facecolor='lightgray', alpha=0.8)) ax4.set_xlim(0, 1) ax4.set_ylim(0, 1) ax4.axis('off') # 5. Matriz de correlação ax5 = fig.add_subplot(gs[1, 1:3]) corr_vars = ['preco', 'area', 'quartos', 'banheiros', 'preco_por_m2'] correlation = df[corr_vars].corr() im = ax5.imshow(correlation, cmap='coolwarm', aspect='auto', vmin=-1, vmax=1) ax5.set_xticks(range(len(corr_vars))) ax5.set_yticks(range(len(corr_vars))) ax5.set_xticklabels(corr_vars, rotation=45) ax5.set_yticklabels(corr_vars) ax5.set_title('Matriz de Correlação') # Adicionar valores na matriz 
        for i in range(len(corr_vars)): 
        for j in range(len(corr_vars)): text = ax5.text(j, i, f'{correlation.iloc[i, j]:.2f}', ha="center", va="center", color="black", fontweight='bold') # 6. Distribuição de tipos ax6 = fig.add_subplot(gs[1, 3]) tipo_counts = df['tipo'].value_counts() ax6.pie(tipo_counts.values, labels=tipo_counts.index, autopct='%1.1f%%', startangle=90) ax6.set_title('Tipos de Imóvel') # 7. Análise temporal (se disponível) ou quartos ax7 = fig.add_subplot(gs[2, :2]) quartos_preco = df.groupby('quartos')['preco'].agg(['mean', 'std']).fillna(0) x_pos = range(len(quartos_preco)) ax7.bar(x_pos, quartos_preco['mean'], yerr=quartos_preco['std'], alpha=0.7, color='purple', capsize=5) ax7.set_title('Preço Médio por Número de Quartos') ax7.set_xlabel('Número de Quartos') ax7.set_ylabel('Preço Médio (R$)') ax7.set_xticks(x_pos) ax7.set_xticklabels(quartos_preco.index) # 8. Performance do modelo (se disponível) ax8 = fig.add_subplot(gs[2, 2:]) 
        if 'y_test' in results and 'y_pred' in results: y_test = results['y_test'] y_pred = results['y_pred'] ax8.scatter(y_test, y_pred, alpha=0.6, color='red') min_val = min(min(y_test), min(y_pred)) max_val = max(max(y_test), max(y_pred)) ax8.plot([min_val, max_val], [min_val, max_val], 'k--', lw=2) ax8.set_xlabel('Valores Reais (R$)') ax8.set_ylabel('Valores Preditos (R$)') ax8.set_title(f'Performance do Modelo (R² = {results["r2_score"]:.4f})') 
        else: # Mostrar métricas textuais metrics_text = f
    """PERFORMANCE DO MODELO R² Score: {results['r2_score']:.4f} MSE: {results['mse']:,.0f} RMSE: R$ {results['rmse']:,.0f} MAE: R$ {results['mae']:,.0f} Interpretação: O modelo explica {results['r2_score']*100:.1f}% da variação nos preços."""
 ax8.text(0.05, 0.95, metrics_text, transform=ax8.transAxes, fontsize=12, verticalalignment='top', bbox=dict(boxstyle='round', facecolor='lightblue', alpha=0.8)) ax8.set_xlim(0, 1) ax8.set_ylim(0, 1) ax8.axis('off') plt.savefig('data/dashboard_completo.png', dpi=300, bbox_inches='tight') plt.close() 
        print("Dashboard completo salvo: 'data/dashboard_completo.png'") # Função para teste 
        if __name__ == "__main__": # Teste com dados simulados data = { 'preco': [400000, 350000, 600000, 250000, 500000, 300000], 'area': [80, 70, 120, 50, 90, 60], 'quartos': [3, 2, 4, 2, 3, 2], 'banheiros': [2, 1, 3, 1, 2, 1], 'localizacao': ['Asa Norte', 'Ceilândia', 'Asa Sul', 'Taguatinga', 'Guará', 'Águas Claras'], 'tipo': ['Apartamento', 'Apartamento', 'Casa', 'Apartamento', 'Apartamento', 'Studio'], 'preco_por_m2': [5000, 5000, 5000, 5000, 5556, 5000] } df_test = pd.DataFrame(data) results_test = { 'r2_score': 0.85, 'mse': 5000000000, 'rmse': 70711, 'mae': 55000, 'feature_importance': {'area': 1000, 'quartos': 50000, 'localizacao': 25000} } visualizer = DataVisualizer() visualizer.criar_visualizacoes(df_test, results_test) 
        print("Teste do visualizador concluído!")